apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: create-cluster
spec:
  inputs:
    params:
    - name: app_dir
      type: string
      description: where to create the kf app
    - name: cluster
      type: string
      description: name of the cluster
    - name: configPath
      type: string
      description: url for config arg
    - name: cpu-pool-initialNodeCount
      type: string
      description: initial cput node count
    - name: cpu-pool-machine-type
      type: string
      description: cpu machine type
    - name: cpu-pool-max-nodes
      type: string
      description: max cpu nodes
    - name: cpu-pool-min-nodes
      type: string
      description: min cpu nodes
    - name: cpu-pool-min-cpu-platform
      type: string
      description: cpu platform
    - name: cpu-pool-image-type
      type: string
      description: cpu image type
    - name: email
      type: string
      description: email for gcp
    - name: gpu-pool-initialNodeCount
      type: string
      description: initial gpu node count
    - name: gpu-pool-machine-type
      type: string
      description: gpu machine type
    - name: gpu-pool-max-nodes
      type: string
      description: max gpu nodes
    - name: gpu-pool-min-nodes
      type: string
      description: min gpu nodes
    - name: gpu-type
      type: string
      description: gpu type
    - name: gpu-pool-image-type
      type: string
      description: gpu image type
    - name: kfctl_image
      type: string
      description: the kfctl container image
    - name: namespace
      type: string
      description: the namespace to deploy kf 
    - name: platform
      type: string
      description: all | k8s
    - name: project
      type: string
      description: name of project
    - name: pvc_mount_path
      type: string
      description: parent dir for kfctl
    - name: zone
      type: string
      description: zone of project
  steps:
  - name: kfctl-activate-service-account
    image: "${inputs.params.kfctl_image}"
    imagePullPolicy: IfNotPresent
    workingDir: "${inputs.params.pvc_mount_path}"
    command: ["/opt/google-cloud-sdk/bin/gcloud"]
    args:
    - "auth"
    - "activate-service-account"
    - "--key-file"
    - "/secret/kaniko-secret.json"
    env:
    - name: GOOGLE_APPLICATION_CREDENTIALS
      value: /secret/kaniko-secret.json
    volumeMounts:
    - name: kaniko-secret
      mountPath: /secret
    - name: kubeflow
      mountPath: /kubeflow
  - name: kfctl-set-account
    image: "${inputs.params.kfctl_image}"
    imagePullPolicy: IfNotPresent
    workingDir: "${inputs.params.pvc_mount_path}"
    command: ["/opt/google-cloud-sdk/bin/gcloud"]
    args:
    - "config"
    - "set"
    - "account"
    - "${inputs.params.email}"
    env:
    - name: GOOGLE_APPLICATION_CREDENTIALS
      value: /secret/kaniko-secret.json
    volumeMounts:
    - name: kaniko-secret
      mountPath: /secret
    - name: kubeflow
      mountPath: /kubeflow
  - name: kfctl-init
    image: "${inputs.params.kfctl_image}"
    workingDir: "${inputs.params.pvc_mount_path}"
    command: ["/usr/local/bin/kfctl"]
    args:
    - "init"
    - "--config"
    - "${inputs.params.configPath}"
    - "--project"
    - "${inputs.params.project}"
    - "--namespace"
    - "${inputs.params.namespace}"
    - "${inputs.params.app_dir}"
    env:
    - name: GOOGLE_APPLICATION_CREDENTIALS
      value: /secret/kaniko-secret.json
    volumeMounts:
    - name: kaniko-secret
      mountPath: /secret
    - name: kubeflow
      mountPath: "${inputs.params.pvc_mount_path}"
    imagePullPolicy: IfNotPresent
  - name: kfctl-generate
    image: "${inputs.params.kfctl_image}"
    imagePullPolicy: IfNotPresent
    workingDir: "${inputs.params.pvc_mount_path}/${inputs.params.app_dir}"
    command: ["/usr/local/bin/kfctl"]
    args:
    - "generate"
    - "${inputs.params.platform}"
    - "--zone"
    - "${inputs.params.zone}"
    - "--email"
    - "${inputs.params.email}"
    env:
    - name: GOOGLE_APPLICATION_CREDENTIALS
      value: /secret/kaniko-secret.json
    - name: CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: client-secret
          key: CLIENT_ID
    - name: CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: client-secret
          key: CLIENT_SECRET
    volumeMounts:
    - name: kaniko-secret
      mountPath: /secret
    - name: client-secret
      mountPath: /client-secret
    - name: kubeflow
      mountPath: /kubeflow
  - name: update-gcp-config
    image: "${inputs.params.kfctl_image}"
    imagePullPolicy: IfNotPresent
    workingDir: "${inputs.params.pvc_mount_path}/${inputs.params.app_dir}/gcp_config"
    #command: ["/bin/sleep", "infinity"]
    command: ["/bin/bash", "/update-gcp-config/update-gcp-config.sh"]
    env:
    - name: GOOGLE_APPLICATION_CREDENTIALS
      value: /secret/kaniko-secret.json
    volumeMounts:
    - name: kubeflow
      mountPath: /kubeflow
    - name: update-gcp-config
      mountPath: /update-gcp-config
  - name: kfctl-apply
    image: "${inputs.params.kfctl_image}"
    imagePullPolicy: IfNotPresent
    workingDir: "${inputs.params.pvc_mount_path}/${inputs.params.app_dir}"
    #command: ["/bin/sleep", "infinity"]
    command: ["/usr/local/bin/kfctl"]
    args:
    - "apply"
    - "${inputs.params.platform}"
    - "--verbose"
    env:
    - name: GOOGLE_APPLICATION_CREDENTIALS
      value: /secret/kaniko-secret.json
    - name: CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: client-secret
          key: CLIENT_ID
    - name: CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: client-secret
          key: CLIENT_SECRET
    volumeMounts:
    - name: kaniko-secret
      mountPath: /secret
    - name: client-secret
      mountPath: /client-secret
    - name: kubeflow
      mountPath: /kubeflow
  volumes:
  - name: kaniko-secret
    secret:
      secretName: kaniko-secret
  - name: client-secret
    secret:
      secretName: client-secret
  - name: kubeflow
    persistentVolumeClaim:
      claimName: ci-pipeline-run-persistent-volume-claim
  - name: update-gcp-config
    configMap:
      name: update-gcp-config
